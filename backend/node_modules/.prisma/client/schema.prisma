generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  role      Role      @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  addresses Address[]
  carts     Cart[]
  orders    Order[]
  reviews   Review[]

  @@map("users")
}

model Address {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  street     String
  city       String
  state      String
  postalCode String
  country    String   @default("Brasil")
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  orders     Order[]

  @@map("addresses")
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String
  price       Float
  stock       Int
  image       String?
  categoryId  String
  category    Category    @relation(fields: [categoryId], references: [id])
  brand       String
  weight      Float
  flavor      String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  carts       CartItem[]
  orderItems  OrderItem[]
  reviews     Review[]

  @@map("products")
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  slug      String    @unique
  image     String    @default("https://images.unsplash.com/photo-1593095948071-474c5cc2989d")
  products  Product[]
  createdAt DateTime  @default(now())

  @@map("categories")
}

model Cart {
  id        String     @id @default(uuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
  createdAt DateTime @default(now())

  @@map("cart_items")
}

model Order {
  id        String      @id @default(uuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
  total     Float
  status    OrderStatus @default(PENDING)
  addressId String
  address   Address     @relation(fields: [addressId], references: [id])
  payment   Payment?
  paymentId String?     @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime @default(now())

  @@map("order_items")
}

model Payment {
  id          String        @id @default(uuid())
  order       Order         @relation(fields: [orderId], references: [id])
  orderId     String        @unique
  method      PaymentMethod
  amount      Float
  status      PaymentStatus @default(PENDING)
  transaction String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("payments")
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  @@map("reviews")
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PIX
  BOLETO
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
